var documenterSearchIndex = {"docs":
[{"location":"#DistMesh.jl","page":"Home","title":"DistMesh.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DistMesh.jl implements simplex refinement on signed distance functions, or anything that has a sign, distance, and called like a function. The algorithm was first presented in 2004 by Per-Olof Persson, and was initially a port of the corresponding Matlab Code.","category":"page"},{"location":"#What-is-Simplex-Refinement?","page":"Home","title":"What is Simplex Refinement?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In layman's terms, a simplex is either a triangle in the 2D case, or a tetrahedra in the 3D case.","category":"page"},{"location":"","page":"Home","title":"Home","text":"When simulating, you other want a few things from a mesh of simplices:     - Accurate approximation of boundaries and features     - Adaptive mesh sizes to improve accuracy     - Near-Regular Simplicies","category":"page"},{"location":"","page":"Home","title":"Home","text":"DistMesh is designed to address the above.","category":"page"},{"location":"#Algorithm-Overview","page":"Home","title":"Algorithm Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The basic processes is as follows:","category":"page"},{"location":"#Comparison-to-other-refinements","page":"Home","title":"Comparison to other refinements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DistMesh generally has a very low memory footprint, and can refine without additional memory allocation. Similarly, since the global state of simplex qualities is accounted for in each refinement iteration, this leads to very high quality meshes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Aside from the above, since DistMesh works on signed distance functions it can handle complex and varied input data that are not in the form of surface meshes (Piecewise Linear Complicies).","category":"page"},{"location":"#Difference-from-the-MatLab-implementation","page":"Home","title":"Difference from the MatLab implementation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Given the same parameters, the Julia implementation of DistMesh will generally perform 4-60 times faster than the MatLab implementation. Delaunay Triangulation in MatLab uses QHull, whereas DistMesh.jl uses TetGen.","category":"page"},{"location":"#How-do-I-get-a-Signed-Distance-Function?","page":"Home","title":"How do I get a Signed Distance Function?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here are some libraries that turn gridded and level set data into an approximate signed distance function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Interpolations.jl\nAdaptiveDistanceFields.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#DistMesh.DistMeshQuality","page":"Home","title":"DistMesh.DistMeshQuality","text":"DistMeshQuality\n\nUse Tetrahedral quality analysis to control the meshing process\n\niso (default: 0): Value of which to extract the iso surface, inside negative\ndeltat (default: 0.1): the fraction of edge displacement to apply each iteration\n\n\n\n\n\n","category":"type"},{"location":"#DistMesh.DistMeshResult","page":"Home","title":"DistMesh.DistMeshResult","text":"DistMeshResult\n\nA struct returned from the distmesh function that includes point, simplex, and interation statistics.\n\n\n\n\n\n","category":"type"},{"location":"#DistMesh.DistMeshSetup","page":"Home","title":"DistMesh.DistMeshSetup","text":"DistMeshSetup\n\nTakes Keyword arguments as follows:\n\niso (default: 0): Value of which to extract the isosurface, inside surface is negative\ndeltat (default: 0.1): the fraction of edge displacement to apply each iteration\nsort (default:false): If true and no fixed points, sort points using a hilbert sort.\nsort_interval (default:20) Use hilbert sort after the specified retriangulations\ndistribution (default: :regular) Initial point distribution, either :regular or :packed.\n\n\n\n\n\n","category":"type"},{"location":"#DistMesh.DistMeshStatistics","page":"Home","title":"DistMesh.DistMeshStatistics","text":"DistMeshStatistics\n\n    Statistics about the convergence between iterations\n\n\n\n\n\n","category":"type"},{"location":"#DistMesh.HUniform","page":"Home","title":"DistMesh.HUniform","text":"Uniform edge length function.\n\n\n\n\n\n","category":"type"},{"location":"#DistMesh.dihedral_angles-Tuple{Any, Any}","page":"Home","title":"DistMesh.dihedral_angles","text":"Compute dihedral angles within a tetrahedra\nradians\n\n\n\n\n\n","category":"method"},{"location":"#DistMesh.distmesh-Union{Tuple{VertType}, Tuple{Function, Union{HUniform, Function}, Number}, Tuple{Function, Union{HUniform, Function}, Number, DistMesh.AbstractDistMeshAlgorithm}} where VertType","page":"Home","title":"DistMesh.distmesh","text":"distmesh\n3D Mesh Generator using Signed Distance Functions.\nArguments:\n    fdist:       Distance function\n    fh:          Edge length function\n    h:           Smallest edge length\n\nReturns:\n    p:           Node positions\n    t:           Triangle indices\n\n\nExample: Unit ball\n    d(p) = sqrt(sum(p.^2))-1\n    p,t = distmeshnd(d,huniform,0.2)\n\n\n\n\n\n","category":"method"},{"location":"#DistMesh.hilbertsort!","page":"Home","title":"DistMesh.hilbertsort!","text":"Hilbert Sorting. If carry is specified, this array will be permuted in line with the specified array.\n\n\n\n\n\n","category":"function"},{"location":"#DistMesh.min_dihedral_angles-Tuple{Any, Any}","page":"Home","title":"DistMesh.min_dihedral_angles","text":"Compute the minimum dihedral angle within a tetrahedra\nradians\n\n\n\n\n\n","category":"method"},{"location":"#DistMesh.retriangulate!-Tuple{Any, DistMesh.DistMeshResult, Vararg{Any, 4}}","page":"Home","title":"DistMesh.retriangulate!","text":"retriangulate!\n\nGiven a point set, generate a delaunay triangulation, and other requirements. This includes:     - Spatial sorting of points     - Delaunay triangulation     - Filtering of invalid tetrahedra outside the boundary\n\n\n\n\n\n","category":"method"},{"location":"#DistMesh.tet_to_edges!-Tuple{Vector, Set, Any}","page":"Home","title":"DistMesh.tet_to_edges!","text":"Decompose tets to edges, using a pre-allocated array and set.\nSet ensures uniqueness, and result will be sorted.\n\n\n\n\n\n","category":"method"},{"location":"#DistMesh.tets_to_tris!-Tuple{Any, Any, Any}","page":"Home","title":"DistMesh.tets_to_tris!","text":"convert tets to tris, returned sorted and unique\n\n\n\n\n\n","category":"method"},{"location":"#DistMesh.triqual-Tuple{Any, Any, Any}","page":"Home","title":"DistMesh.triqual","text":"Determine the quality of a triangle given 3 points.\n\nPoints must be 3D.\n\n\n\n\n\n","category":"method"},{"location":"#DistMesh.volume_edge_extrema-Union{Tuple{T}, Tuple{Vector{T}, Any}} where T","page":"Home","title":"DistMesh.volume_edge_extrema","text":"returns the extrema elements (min, max) of the sampled qualities\n\n\n\n\n\n","category":"method"},{"location":"#DistMesh.volume_edge_ratio-NTuple{4, Any}","page":"Home","title":"DistMesh.volume_edge_ratio","text":"Computes the volume and edge-length ratio from four given points\n\n\n\n\n\n","category":"method"},{"location":"#DistMesh.volume_edge_stats-Union{Tuple{T}, Tuple{Vector{T}, Any}} where T","page":"Home","title":"DistMesh.volume_edge_stats","text":"returns the (min, avg, max) of the sampled qualities\n\n\n\n\n\n","category":"method"}]
}
